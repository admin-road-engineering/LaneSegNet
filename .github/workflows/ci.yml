name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers

env:
  PYTHON_VERSION: "3.11"
  CACHE_VERSION: "1"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: black --check --diff app/ tests/

      - name: Check import sorting with isort
        run: isort --check-only --diff app/ tests/

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ tests/ --count --exit-zero --max-complexity=15 --max-line-length=100 --statistics

      - name: Type check with mypy
        run: mypy app/ --ignore-missing-imports
        continue-on-error: true  # Type checking is advisory for now

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/ -m "unit" --cov=app --cov-report=xml --cov-report=html --cov-fail-under=85 -v
        env:
          # Disable GPU for CI testing
          CUDA_VISIBLE_DEVICES: ""
          # Set test mode to skip model loading
          TESTING_MODE: "true"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      # Add any required services (Redis, databases, etc.)
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test data directory
        run: |
          mkdir -p data/imgs
          # Create dummy test images for local imagery testing
          python -c "
          from PIL import Image
          import os
          for i in range(10):
              img = Image.new('RGB', (512, 512), color='red')
              img.save(f'data/imgs/{i:08d}.jpg')
          "

      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" --tb=short -v
        env:
          CUDA_VISIBLE_DEVICES: ""
          TESTING_MODE: "true"
          REDIS_URL: "redis://localhost:6379"

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test data
        run: |
          mkdir -p data/imgs
          python -c "
          from PIL import Image
          for i in range(5):
              img = Image.new('RGB', (1280, 1280), color='green')
              img.save(f'data/imgs/{i:08d}.jpg')
          "

      - name: Start API server
        run: |
          # Start server in background
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8010 &
          # Wait for server to start
          sleep 10
        env:
          CUDA_VISIBLE_DEVICES: ""
          TESTING_MODE: "true"

      - name: Run API tests
        run: |
          pytest tests/ -m "api" --tb=short -v
        env:
          API_BASE_URL: "http://localhost:8010"

      - name: Health check
        run: |
          curl -f http://localhost:8010/health || exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Check for known vulnerabilities
        run: |
          safety check --file requirements.txt --continue-on-error

      - name: Run Bandit security linter
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
        if: always()

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test data
        run: |
          mkdir -p data/imgs
          python -c "
          from PIL import Image
          for i in range(10):
              img = Image.new('RGB', (1280, 1280), color='blue')
              img.save(f'data/imgs/{i:08d}.jpg')
          "

      - name: Start API server
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8010 &
          sleep 15
        env:
          CUDA_VISIBLE_DEVICES: ""
          TESTING_MODE: "true"

      - name: Run load tests
        run: |
          # Light load test for CI
          locust -f tests/test_load_testing.py --host=http://localhost:8010 \
                 --users 5 --spawn-rate 1 --run-time 60s --headless \
                 --csv=load_test_results
        continue-on-error: true

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load_test_results*
        if: always()

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: lanesegnet:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run container health check
          docker run --rm -d --name lanesegnet-test -p 8011:8010 lanesegnet:test
          sleep 30
          curl -f http://localhost:8011/health || exit 1
          docker stop lanesegnet-test

  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, api-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "✅ All quality checks passed"
          echo "✅ Unit tests passed"
          echo "✅ Integration tests passed" 
          echo "✅ API tests passed"
          echo "✅ Security scan completed"
          echo "✅ Docker build successful"
          echo "🚀 Ready for deployment"

      - name: Create deployment artifact
        run: |
          echo "DEPLOYMENT_READY=true" >> deployment.env
          echo "BUILD_SHA=${GITHUB_SHA}" >> deployment.env
          echo "BUILD_REF=${GITHUB_REF}" >> deployment.env
          echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment.env

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-config
          path: deployment.env

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: always()

    steps:
      - name: Notify success
        if: needs.deployment-check.result == 'success'
        run: |
          echo "🎉 CI/CD pipeline completed successfully!"
          echo "✅ All tests passed"
          echo "🚀 Ready for deployment"

      - name: Notify failure  
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed"
          echo "Check the logs for details"
          exit 1